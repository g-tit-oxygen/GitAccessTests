<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="using-webapp-github">
  <title>Using a Git Repository</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>GitHub repository support</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p><ph keyref="webappProduct"/> includes a <i>Git</i>
      <xref keyref="glossentry_plugin"><term>plugin</term></xref> that allows you to edit files
      stored in a Git repository (including GitHub, GitLab, and Bitbucket integrations). The
      procedure in this topic assumes that your <xref
        href="webapp-integrate-github-plugin.dita#webapp-integrate-github-plugin">system
        administrator has enabled this <term>plugin</term></xref> in your installation of <ph
        keyref="webappProduct"/>.</p>
    <section id="open_or_create_file_stored_in_github">
      <title>Opening or Creating Files</title>
      <p>To open a file stored in a Git repository or create a new file, go to the main <xref
          href="webapp-create-open-docs.dita#webapp-create-open-docs">Dashboard</xref>, click the
        tab for your particular Git file repository integration (GitHub, Bitbucket, or GitLab), and
        click the <uicontrol><image href="../img/OpenProject16.png"/> Open</uicontrol> button to
        browse for existing files, the <uicontrol><image href="../img/New16.png"/> New</uicontrol>
        button to create a new one. For detailed information about this process, see <xref
          href="webapp-create-open-docs.dita#webapp-create-open-docs"/>.</p>
      <p>If your connection has not yet been configured, a dialog box will be displayed that
        provides instructions for configuring and selecting the URL for the connection. For more
        information, see <xref
          href="webapp-configure-plugins.dita#webapp-configure-plugins/configure_a_plugin"/>. </p>
    </section>
    <section id="commit_a_file_to_github">
      <title>Committing Files to a Git Repository</title>
      <p>To commit a file to a Git repository, select the <uicontrol>Commit on Git</uicontrol>
        action on the toolbar (or use the <uicontrol><shortcut>Ctrl + S (Command + S on OS
            X)</shortcut></uicontrol> shortcut). If you have <term>push</term> access, a
          <uicontrol>Commit on Git</uicontrol> dialog box will be opened that allows you to enter a
          <i>commit message</i>, choose the branch where the commit will be processed (you can also
        edit the name of the branch in this dialog box), and it also includes a <uicontrol>Choose a
          previously entered comment</uicontrol> drop-down menu that allows you to select a
        previously used commit message.</p>
      <p>
        <fig>
          <title>Commit on Git Dialog Box</title>
          <image href="../img/WA_Commit_git.png"/>
        </fig>
      </p>
      <p>If someone else has committed the current document since you last opened it (causing
        conflicts), a <uicontrol>Commit Status</uicontrol> confirmation dialog box will appear.</p>
      <p>
        <fig>
          <title>Commit Status Dialog Box</title>
          <image href="../img/commit_status.png"/>
        </fig>
      </p>
      <p>The <uicontrol>Commit Status</uicontrol> dialog box allows you to choose the following options:<ul>
          <li><uicontrol>Click here</uicontrol> link - You can click the link at the top of the
            dialog box to see the difference between the two commits.</li>
          <li><uicontrol>Merge and commit</uicontrol> - Merges your changes with versions that were
            committed by other people and commits the merged changes.</li>
          <li><uicontrol>Commit on a new branch</uicontrol> - Creates a new branch that contains
            your version of the document so that you can merge the changes at a later time, after
            the conflicts have been solved.</li>
          <li><uicontrol>Commit only my changes</uicontrol> - Commits your changes regardless of
            whether or not there was a conflict, and the changes made by the other user are
            lost.</li>
          <li><uicontrol>Cancel</uicontrol> - Cancels the operation and your changes are not
            committed to the repository. Before canceling, you could click the link at the top to
            see the differences, correct the conflicts manually, and then commit afterwards using
            the <uicontrol>Commit only my changes</uicontrol> option.</li>
        </ul></p>
    </section>
    <section id="committing_to_a_repository_without_access">
      <title>Committing to a Repository Without Access Rights</title>
      <p>If you try to commit a file on a repository that you do not have access to, a dialog box is
        displayed that allows you to enter or choose a <i>commit message</i> but you cannot choose a
        branch. It warns you that continuing will commit the file to a new branch and allows you to
        create an automatic pull request.</p>
      <p>
        <fig>
          <title>Commit Error Dialog Box</title>
          <image href="../img/WA_commit_error.png"/>
        </fig>
      </p>
      <p>When you tap or click the <uicontrol>Commit</uicontrol> button, the Git connector will
        automatically do the following: <ul>
          <li>Fork the project into your account, if it is not already.</li>
          <li>Create a new branch from the edited branch.</li>
          <li>Commit your changes on this newly created branch.</li>
          <li>Create a pull request from your newly created branch to the originally edited
            branch.</li>
          <li>Switch the editor to your branch so further save operations will just add new commits
            to your branch, thus updating the pull request with new changes.</li>
        </ul></p>
    </section>
  </body>
  <related-links>
    <linklist><title>Related Information:</title><link href="webapp-integrate-github-plugin.dita#webapp-integrate-github-plugin"/></linklist>
  </related-links>
</topic>
