<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="dg-default-author-operations">
  <title>Author Mode Default Operations</title>
  <prolog>
    <metadata>
      <keywords><indexterm>Author mode default operations</indexterm></keywords>
    </metadata>
  </prolog>
  <body>
    <p>The default operations for the <uicontrol>Author</uicontrol> mode, along with their arguments
      are as follows:<ul id="ul_gwk_qjh_ps">
        <li><b><b id="ChangeAttributeOperation">ChangeAttributeOperation</b></b><p>This operation
            allows you to add/modify/remove an attribute. You can use this operation in your own
            custom <uicontrol>Author</uicontrol> mode action to modify the value for a certain
            attribute on a specific XML element. The arguments of the operation are:<ul
              id="ul_kwk_qjh_ps">
              <li><b>name</b> - The attribute local name.</li>
              <li><b>namespace</b> - The attribute namespace.</li>
              <li><b>elementLocation</b> - The XPath location that identifies the element.</li>
              <li><b>value</b> - The new value for the attribute. If empty or null the attribute
                will be removed.</li>
              <li><b>editAttribute</b> - If an in-place editor exists for this attribute, it will
                automatically activate the in-place editor and start editing.</li>
              <li><b>removeIfEmpty</b> - The possible values are <codeph>true</codeph> and
                  <codeph>false</codeph>. True means that the attribute should be removed if an
                empty value is provided. The default behavior is to remove it.</li>
            </ul></p></li>
        <li><b id="ChangePseudoClassesOperation">ChangePseudoClassesOperation</b><p>Operation that
            sets a list of pseudo-class values to nodes identified by an XPath expression. It can
            also remove a list of values from nodes identified by an XPath expression. The operation
            accepts the following parameters:<ul id="ul_rwk_qjh_ps">
              <li><b>setLocations</b> - An XPath expression indicating a list of nodes for which the
                specified list of pseudo-classes will be set. If it is not defined, then the element
                at the cursor position will be used.</li>
              <li><b>setPseudoClassNames</b> - A space-separated list of pseudo-class names that
                will be set on the matched nodes.</li>
              <li><b>removeLocations</b> - An XPath expression indicating a list of nodes from which
                the specified list of pseudo-classes will be removed. If it is not defined, then the
                element at the cursor position will be used.</li>
              <li><b>removePseudoClassNames</b> - A space-separated list of pseudo-class names that
                will be removed from the matched nodes.</li>
              <li><b>includeAllNodes</b> - The possible values are <codeph>yes</codeph> and
                  <codeph>no</codeph>. If set to <codeph>yes</codeph>, comments, CDATA, and text
                nodes are included when evaluating XPath expressions. If set to <codeph>no</codeph>,
                they are ignored.</li>
            </ul></p></li>
        <li><b id="DeleteElementOperation">DeleteElementOperation</b><p>Deletes the node indicated
            by the <codeph>elementLocation</codeph> parameter XPath expression. If missing, the
            operation will delete the node at the cursor location.</p></li>
        <li>
          <p><b id="DeleteElementsOperation">DeleteElementsOperation</b></p>
          <p>Deletes the nodes indicated by the <codeph>elementLocations</codeph> parameter XPath
            expression. If missing, the operation will delete the node at the cursor location.</p>
        </li>
        <li><b id="ExecuteCommandLineOperation">ExecuteCommandLineOperation</b><p>This operation
            allows you to start a process executing a given command line. It has the following arguments:<ul>
              <li><b>name</b> - The name of the operation (or name of the console panel that
                corresponds to the process run by an action built over this operation).</li>
              <li><b>workingDirectory</b> - The path to the directory where the command line is
                executed. The default value is <codeph>"."</codeph> (current directory).</li>
              <li><b>cmdLine</b> - The command line to be executed (accepts <xref
                  href="#dg-default-author-operations/editor_variables_in_author_mode_operations"
                  format="dita">editor variables</xref>).</li>
              <li><b>showConsole</b> - If set to <codeph>true</codeph>, the console panel will be
                displayed in <ph keyref="product"/>. The default value is
                <codeph>false</codeph>.</li>
            </ul></p></li>
        <li><b id="ExecuteMultipleActionsOperation">ExecuteMultipleActionsOperation</b><p>This
            operation allows the execution of a sequence of actions, defined as a list of action
            IDs. The actions must be defined by the corresponding <term>framework</term>, or one of
            the common actions for all <term>frameworks</term> supplied by <ph keyref="product"
              />.<ul id="ul_hvc_pdd_vm">
              <li><b>actionIDs</b> - The action IDs list that will be executed in sequence, the list
                must be a string sequence containing the IDs separated by commas or new lines.</li>
            </ul></p></li>
        <li>
          <p><b id="ExecuteMultipleWebappCompatibleActionsOperation"
              >ExecuteMultipleWebappCompatibleActionsOperation</b></p>
          <p>An implementation of an operation that runs a sequence of <ph keyref="webappProduct"
            />-compatible actions, defined as a list of IDs.</p>
        </li>
        <li><b id="ExecuteTransformationScenariosOperation"
            >ExecuteTransformationScenariosOperation</b><p>This operation allows running one or more
            transformation scenarios defined in the current <xref
              keyref="glossentry_document_type_association"><term>document type
              association</term></xref>. It is useful to add to the toolbar buttons that trigger
            publishing to various output formats. The argument of the operation is:<ul
              id="ul_owk_qjh_ps">
              <li><b>scenarioNames</b> - The list of scenario names that will be executed, separated
                by new lines.</li>
            </ul></p></li>
        <li><b id="InsertEquationOperation">InsertEquationOperation</b><p>Inserts a fragment
            containing a MathML equation at the cursor offset. The argument of this operation is:<ul
              id="ul_jwk_qjh_ps">
              <li><b>fragment</b> - The XML fragment containing the MathML content that should be
                inserted.</li>
            </ul></p></li>
        <li><b id="InsertFragmentOperation">InsertFragmentOperation</b><p>Inserts an XML fragment at
            the current cursor position. The selection - if there is one, remains unchanged. The
            fragment will be inserted in the current context of the cursor position meaning that if
            the current XML document uses some namespace declarations then the inserted fragment
            must use the same declarations. The namespace declarations of the inserted fragment will
            be adapted to the existing namespace declarations of the XML document. For more details
            about its list of parameters, see <xref
              href="dg-author-op-InsertFragmentOperation-arguments.dita"/>.</p></li>
        <li><b id="InsertOrReplaceFragmentOperation">InsertOrReplaceFragmentOperation</b><p>Similar
            to <b>InsertFragmentOperation</b>, except it removes the selected content before
            inserting the fragment. For more details about its list of parameters, see <xref
              href="dg-author-op-InsertFragmentOperation-arguments.dita"/>.</p></li>
        <li><b id="InsertOrReplaceTextOperation">InsertOrReplaceTextOperation</b><p>Inserts a text
            at current position removing the selected content, if any. The argument of this
            operation is:<ul id="ul_hwk_qjh_ps">
              <li><b>text</b> - The text section to insert.</li>
            </ul></p></li>
        <li><b id="InsertXIncludeOperation">InsertXIncludeOperation</b><p>Insert an
              <codeph>XInclude</codeph> element at the cursor offset. Opens a dialog box that allows
            you to browse and select content to be included in your document and automatically
            generates the corresponding XInclude instruction.</p></li>
        <li><b id="JSOperation">JSOperation</b><p>Allows you to call the Java API from custom
            JavaScript content. For some sample <b>JSOperation</b> implementations, see <xref
              href="https://github.com/oxygenxml/javascript-sample-operations" format="html"
              scope="external"/>.<note type="notice">For the <ph keyref="webappProduct"/>, this
              operation cannot be invoked using the JavaScript API.</note></p><p>This operation accepts the following parameter:<ul id="ul_af1_4dr_qr">
              <li><b>script</b><p>The JavaScript content to execute. It must have a function called
                    <codeph>doOperation()</codeph>, which can use the predefined
                    <codeph>authorAccess</codeph> variable. The <codeph>authorAccess</codeph>
                  variable has access to the entire <xref
                    href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorAccess.html"
                    format="html" scope="external"
                    ><i>ro.sync.ecss.extensions.api.AuthorAccess</i></xref> Java API. </p><p>The
                  following example is a script that retrieves the current value of the <b>type</b>
                  attribute on the current element, allows the end user to edit its new value and
                  sets the new value in the
                  document:<codeblock outputclass="language-javascript">function doOperation(){ 
 //The current node is either entirely selected...
 currentNode = authorAccess.getEditorAccess().getFullySelectedNode();
 if(currentNode == null){
 //or the cursor is placed in it
 caretOffset = authorAccess.getEditorAccess().getCaretOffset(); 
 currentNode = authorAccess.getDocumentController().getNodeAtOffset
                          (caretOffset);
 }
 //Get current value of the @type attribute
  currentTypeValue = "";
  currentTypeValueAttr = currentNode.getAttribute("type");
  if(currentTypeValueAttr != null){
    currentTypeValue = currentTypeValueAttr.getValue();
  }
 //Ask user for new value for attribute.
 newTypeValue = javax.swing.JOptionPane.showInputDialog
                         ("Input @type value", currentTypeValue);
 if(newTypeValue != null){
   //Create and set the new attribute value for the @type attribute.
   attrValue = new Packages.ro.sync.ecss.extensions.api.node.AttrValue
                         (newTypeValue);
   authorAccess.getDocumentController().setAttribute
                         ("type", attrValue, currentNode);
 }
} </codeblock></p></li>
            </ul><note type="tip">You can call functions defined inside a script called
                <filepath>commons.js</filepath> from your custom script content so that you can use
              that external script file as a library of functions. Note that this
                <filepath>commons.js</filepath> file must be placed in the root of the
                <term>framework</term> directory (for example, <filepath><term
                  conkeyref="reusables-user-guide/oxy-install-dir"
                />/frameworks/dita/commons.js</filepath>) because that is the only location where
                <ph keyref="product"/> will look for it.</note></p></li>
        <li><b>MoveCaretOperation</b><p>Flexible operation for moving the cursor within a document
            and it is also capable of performing a selection. The operation accepts the following arguments:<ul>
              <li><b>xpathLocation</b> - An XPath expression that identifies the node relative to
                where the cursor will be moved. If the expression identifies more than one node,
                only the first one will be taken into account.</li>
              <li><b>position</b> - The position relative to the node obtained from the XPath
                expression where the cursor will be moved. When also choosing to perform a
                selection, you can use the following possible values:<ul>
                  <li><codeph>Before</codeph> - Places the cursor at the beginning of the
                    selection.</li>
                  <li><codeph>Inside, at the beginning</codeph> - Places the cursor at the beginning
                    of the selection.</li>
                  <li><codeph>After</codeph> - Places the cursor at the end of the selection.</li>
                  <li><codeph>Inside, at the end</codeph> - Places the cursor at the end of the
                    selection.</li>
                </ul></li>
              <li><b>selection</b> - Specifies if the operation should select the element obtained
                from the XPath expression, its content, or nothing at all. The possible values of
                the argument are: <codeph>None</codeph>, <codeph>Element</codeph>, and
                  <codeph>Content</codeph>.</li>
            </ul></p></li>
        <li><b id="MoveElementOperation">MoveElementOperation</b><p>Flexible operation for moving an
            XML element to another location from the same document. XPath expressions are used to
            identify the source element and the target location. The operation takes the following
              parameters:<ul id="ul_qwk_qjh_ps">
              <li><b>sourceLocation</b> - XPath expression that identifies the content to be
                moved.</li>
              <li><b>deleteLocation</b> - XPath expression that identifies the node to be removed.
                This parameter is optional. If missing, the <b>sourceLocation</b> parameter will
                also identify the node to be deleted.</li>
              <li><b>surroundFragment</b> - A string representation of an XML fragment. The moved
                node will be wrapped in this string before moving it in the destination.</li>
              <li><b>targetLocation</b> - XPath expression that identifies the location where the
                node must be moved to.</li>
              <li><b>insertPosition</b> - Argument that indicates the insert position.</li>
              <li><b>moveOnlySourceContentNodes</b> - When <codeph>true</codeph>, only the content
                of the source element is moved.</li>
              <li><b>processTrackedChangesForXpathLocations</b> - When nodes are located via an
                XPath expression and the nodes are deleted with <xref
                  keyref="glossentry_track-changes"><term>Change Tracking</term></xref> enabled,
                they are considered as being present by default (thus, the <term>change
                  tracking</term> is ignored). If you set this argument to <codeph>true</codeph> and
                  <term>change tracking</term> is enabled, deleted nodes will be ignored when the
                XPath locations are computed (thus, the <term>change tracking</term> is NOT
                ignored).</li>
            </ul></p></li>
        <li><b id="OpenInSystemAppOperation">OpenInSystemAppOperation</b><p>Opens a resource in the
            system application that is associated with the resource in the operating system. The
            arguments of this operation is:<ul id="ul_nd3_btn_5r">
              <li><b>resourcePath</b> - An XPath expression that, when executed, returns the path of
                the resource to be opened. <xref href="editor-variables.dita#editor-variables"
                  >Editor variables</xref> are expanded in the value of this parameter, before the
                expression is executed.</li>
              <li><b>isUnparsedEntity</b> - Possible values are <codeph>true</codeph> or
                  <codeph>false</codeph>. If the value is <codeph>true</codeph>, the value of the
                    <b>resourcePath</b> argument is treated as the name of an unparsed
                entity.</li>
            </ul></p></li>
        <li><b id="RemovePseudoClassOperation">RemovePseudoClassOperation</b><p>An operation that
            removes a pseudo-class from an element. Accepts the following parameters:<ul
              id="ul_lvb_n3h_ps">
              <li>
                <p><b>name</b> - Name of the pseudo-class to be removed.</p>
              </li>
              <li><b>includeAllNodes</b> - The possible values are <codeph>yes</codeph> and
                  <codeph>no</codeph>. If set to <codeph>yes</codeph>, comments, CDATA, and text
                nodes are included when evaluating XPath expressions. If set to <codeph>no</codeph>,
                they are ignored.</li>
              <li><b>elementLocation</b> - The XPath location that identifies the element. Leave it
                empty for the current element. It can also identify multiple elements, in which case
                the pseudo class will be removed from all of them.<p><b>Example:</b></p><p>Suppose
                  that there is a pseudo-class called <codeph>myClass</codeph> on the element
                    <codeph>paragraph</codeph> and there are CSS styles matching the pseudo-class. </p><p>
                  <codeblock outputclass="language-css">paragraph:myClass{
  font-size:2em;
  color:red;
}
paragraph{
  color:blue;
}</codeblock>
                </p><p>In the previous example, by removing the pseudo-class, the layout of the
                    <codeph>paragraph</codeph> is rebuilt by matching the other rules (in this case,
                  the foreground color of the <codeph>paragraph</codeph> element will become
                  blue.</p></li>
            </ul></p></li>
        <li><b id="RenameElementOperation">RenameElementOperation</b><p>This operation allows you to
            rename all occurrences of the elements identified by an XPath expression. The operation
            requires two parameters:<ul id="ul_nwk_qjh_ps">
              <li><b>elementName</b> - The new element name</li>
              <li><b>elementLocation</b> - The XPath expression that identifies the element
                occurrences to be renamed. If this parameter is missing, the operation renames the
                element at current cursor position.</li>
            </ul></p></li>
        <li><b id="SetPseudoClassOperation">SetPseudoClassOperation</b><p>An operation that sets a
            pseudo-class to an element. The operation accepts the following parameters:<ul
              id="ul_swk_qjh_ps">
              <li><b>elementLocation</b> - An XPath expression indicating the element for which the
                pseudo-class will be set. If it is not defined, then the element at cursor position
                will be used.</li>
              <li><b>name</b> - The pseudo-class local name.</li>
              <li><b>includeAllNodes</b> - The possible values are <codeph>yes</codeph> and
                  <codeph>no</codeph>. If set to <codeph>yes</codeph>, comments, CDATA, and text
                nodes are included when evaluating XPath expressions. If set to <codeph>no</codeph>,
                they are ignored.</li>
            </ul></p></li>
        <li><b id="ShowElementDocumentationOperation">ShowElementDocumentationOperation</b><p>Opens
            the associated specification HTML page for the current element. The operation accepts as
            parameter a URL pattern that points to the HTML page containing the
          documentation.</p></li>
        <li><b id="SurroundWithFragmentOperation">SurroundWithFragmentOperation</b><p>Surrounds the
            selected content with a text fragment. Since the fragment can have multiple nodes, the
            surrounded content will be always placed in the first leaf element. If there is no
            selection, the operation will simply insert the fragment at the cursor position. For
            more details about the list of parameters go to <xref
              href="dg-author-op-SurroundWithFragmentOperation-arguments.dita"/>.</p></li>
        <li><b id="SurroundWithTextOperation">SurroundWithTextOperation</b><p>This operation has two
            arguments (two text values) that will be inserted before and after the selected content.
            If there is no selected content, the two sections will be inserted at the cursor
            position. The arguments of the operation are:<ul id="ul_iwk_qjh_ps">
              <li><b>header</b> - The text that is placed before the selection.</li>
              <li><b>footer</b> - The text that is placed after the selection.</li>
            </ul></p></li>
        <li><b id="TogglePseudoClassOperation">TogglePseudoClassOperation</b><p>An implementation of
            an operation to toggle on/off the pseudo-class of an element. Accepts the following parameters:<ul>
              <li>
                <p><b>name</b> - Name of the pseudo-class to be toggled on/off.</p>
              </li>
              <li><b>includeAllNodes</b> - The possible values are <codeph>yes</codeph> and
                  <codeph>no</codeph>. If set to <codeph>yes</codeph>, comments, CDATA, and text
                nodes are included when evaluating XPath expressions. If set to <codeph>no</codeph>,
                they are ignored.</li>
              <li><b>elementLocation</b> - The XPath location that identifies one or more elements
                for which the pseudo class will be toggled. Leave it empty for the current
                    element.<p><b>Example:</b></p><codeblock outputclass="language-css">paragraph:myClass{
  color:red;
}
paragraph{
  color:blue;
}</codeblock><p>By
                  default, the paragraph content is rendered in blue. Suppose that we have a
                    <codeph>TogglePseudoClassOperation</codeph> configured for the
                    <codeph>myClass</codeph> pseudo-class. Invoking it the first time will set the
                    <codeph>myClass</codeph> pseudo-class and the paragraph will be rendered in red.
                  Invoking the operation again, will remove the pseudo-class and the visible result
                  will be a blue rendered <codeph>paragraph</codeph> element.</p></li>
            </ul></p></li>
        <li><b id="ToggleSurroundWithElementOperation">ToggleSurroundWithElementOperation</b><p>This
            operation allows wrapping and unwrapping content in a specific wrapper element that can
            have certain attributes specified on it. It is useful to implement toggle actions such
            as highlighting text as bold, italic, or underline. The operation supports processing
            multiple selection intervals, such as multiple cells within a table column selection.
            The arguments of the operation are:<ul id="ul_mwk_qjh_ps">
              <li><b>element</b> - The element to wrap or unwrap content.</li>
              <li><b>schemaAware</b> - <ph
                  conkeyref="reusables-author-mode-customization/schema_aware_argument"/>
              </li>
            </ul></p></li>
        <li><b id="UnwrapTagsOperation">UnwrapTagsOperation</b><p>This operation allows removing the
            element tags either from the current element or for an element identified with an XPath
            location. The argument of the operation is<ul id="ul_lwk_qjh_ps">
              <li><b>unwrapElementLocation</b> - An XPath expression indicating the element to
                unwrap. If it is not defined, the element at the cursor position is unwrapped.</li>
            </ul></p></li>
        <li><b id="XQueryUpdateOperation">XQueryUpdateOperation</b><p>Allows you to execute an
            XQuery Update script directly over content in <uicontrol>Author</uicontrol> mode.<note
              type="notice">This operation is not applicable to the <ph keyref="authorComponent"/>
              or the <ph keyref="webappProduct"/>.</note></p><p>It supports the following arguments:<ul>
              <li><b>script</b> - The XQuery Update script to be executed. The value can either be
                an XQuery script or a URL that points to the XQuery Update script. You can use the
                  <xref href="editor-variables.dita#editor-variables/edvar-framework"
                    ><i>${framework}</i></xref> or <xref
                  href="editor-variables.dita#editor-variables/edVar-frameworkDir"
                    ><i>${frameworkDir}</i></xref> editor variables to refer the scripts from the
                  <term>framework</term> directory.<p>The script will be executed in the context of
                  the node at the cursor position. If the script declares the following variable, it
                  will also receive the selected nodes (assuming that entire nodes are
                  selected):</p><codeblock outputclass="language-ini">declare variable $oxyxq:selection external;</codeblock><p>In
                  the <xref href="#dg-default-author-operations/example1" format="dita">example
                    below</xref>, you can see how this argument is used.</p></li>
              <li><b>externalParams</b> - A string that can assign multiple key-value pairs
                separated by a comma or a new line character.<p>For example, if an XQuery script
                  declares two external parameters like this:
                </p><codeblock outputclass="language-xml">declare variable $param1 external;
declare variable $param2 external;</codeblock>You
                can pass custom values for each parameter by setting the
                  <apiname>externalParams</apiname> to
                <codeph>param1=value1,param2=value2</codeph>.</li>
              <li><b>expandXincludeReferences</b> - Makes all <i>Xinclude</i> elements transparent
                to the XQuery transformer. When the <i>Xinclude</i> references are transparent, the
                  <b>XQueryUpdateOperation</b> can use the referenced elements for further
                processing in the current document, but it cannot change their values in the
                original document. The default value is <codeph>false</codeph>, which means the
                  <i>Xinclude</i> elements are not transparent.</li>
            </ul></p><p id="example1">An example of an XQuery Update Script that converts paragraphs
            to list
            items:<codeblock outputclass="language-ini">declare namespace oxyxq = "http://www.oxygenxml.com/ns/xqu";
(: This variable will be linked to the selected nodes assuming that there are 
actually fully selected nodes. For example this selection will return null: 
&lt;p>{SEL_START}text{SEL_END} in para&lt;/p>
but this will give two "p" elements:
{SEL_END}&lt;p>text&lt;/p>&lt;p>text2&lt;/p>{SEL_END}

If a multiple selection exists it will also be processed and forwarded.
 Again, only fully selected nodes will be passed.
:)
declare variable $oxyxq:selection external;

(: We will process either the selection or the context node :)
let $toProcess := if (empty($oxyxq:selection)) then
    (.)
else
    ($oxyxq:selection)

returnif (not(empty($toProcess))) then
        (
        (: Create the list :)
        let $ul :=
        &lt;ul>
            {
                for $sel in $toProcess
                return
                    &lt;li>{$sel}&lt;/li>
            }
        &lt;/ul>
        
        return
            (
            (: Delete the processed nodes :)
            for $sel in $toProcess
            return
                delete node $sel,
            (: Inserts the constructed list :)
            insert node $ul
                before $toProcess[1]
            )
        )
    else
        ()</codeblock></p></li>
        <li><b id="XSLTOperation">XSLTOperation</b> and <b id="XQueryOperation"
            >XQueryOperation</b><p>Applies an XSLT or XQuery script on a source element and then
            replaces or inserts the result in a specified target element.<note type="notice">For the
                <ph keyref="webappProduct"/>, these operations cannot be invoked using the <xref
                keyref="jscript_api">JavaScript API</xref>.</note></p><p>These operations have the
            following parameters:<ul id="ul_pwk_qjh_ps">
              <li><b>sourceLocation</b><p>An XPath expression indicating the element that the script
                  will be applied on. If it is not defined, then the element at the cursor position
                  will be used. </p><p>There may be situations in which you want to look at an
                  ancestor of the current element and take decisions in the script based on this. To
                  do this, you can set the <b>sourceLocation</b> to point to an ancestor node then
                  declare a parameter called <b>currentElementLocation</b> in your script and use it
                  to re-position in the current element, as in the following
                  example:<codeblock outputclass="language-xml">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0" 
  xpath-default-namespace="http://docbook.org/ns/docbook" 
  xmlns:saxon="http://saxon.sf.net/" exclude-result-prefixes="saxon">     
    &lt;!-- This is an XPath location to be sent by the operation to the script -->
    &lt;xsl:param name="currentElementLocation"/>
    
    &lt;xsl:template match="/">
        &lt;!-- Evaluate the XPath of the current element location -->
        &lt;xsl:apply-templates 
        select="saxon:eval(saxon:expression($currentElementLocation))"/>
    &lt;/xsl:template>
    
    &lt;xsl:template match="para">
        &lt;!-- And the context is again inside the current element, 
        but we can use information from the entire XML -->
        &lt;xsl:variable 
            name="keyImage" select="//imagedata[@fileref='images/lake.jpeg']
              /ancestor::inlinemediaobject/@xml:id/string()"/>
                &lt;xref linkend="{$keyImage}" role="key_include" 
                  xmlns="http://docbook.org/ns/docbook">
                    &lt;xsl:value-of 
                          select="$currentElementLocation">&lt;/xsl:value-of>
        &lt;/xref>
    &lt;/xsl:template>    
&lt;/xsl:stylesheet></codeblock></p></li>
              <li><b>targetLocation</b><p>An XPath expression indicating the insert location for the
                  result of the transformation. If it is not defined then the insert location will
                  be at the cursor location.</p></li>
              <li><b>script</b><p>The script content (XSLT or XQuery). The base system ID for this
                  will be the <term>framework</term> file, so any include/import reference will be
                  resolved relative to the <filepath>.framework</filepath> file that contains this
                  action definition.</p><p>For example, for the following script, the imported
                    <filepath>xslt_operation.xsl</filepath> needs to be located in the current
                    <term>framework</term>
                  directory.</p><codeblock outputclass="language-xml">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
             version="1.0">
    &lt;xsl:import href="xslt_operation.xsl"/>
&lt;/xsl:stylesheet></codeblock><p>You
                  can also use a path for an included or imported reference. When using a path, the
                  following apply:<ul>
                    <li>A relative path is resolved to the <term>framework</term> directory.</li>
                    <li>The <xref href="editor-variables.dita#editor-variables/edvar-framework"
                          ><i>${framework}</i> editor variable</xref> can also be used to reference
                      resources from the <term>framework</term> directory.</li>
                    <li>The path is passed through the catalog mappings. It helps to use an absolute
                      URL (for instance, <filepath>http://www.oxygenxml.com/fr/testy.xsl</filepath>)
                      and map it in the <filepath>catalog.xml</filepath> file from the
                        <term>framework</term> directory to a resource from the
                        <term>framework</term>.</li>
                  </ul></p></li>
              <li><b>action</b><p>The insert action relative to the node determined by the target
                  XPath expression. It can be: Replace, At cursor position, Before, After, Inside as
                  first child or Inside as last child.</p></li>
              <li><b>caretPosition</b><p>The position of the cursor after the action is executed. It
                  can be: <codeph>Preserve</codeph>, <codeph>Before</codeph>,
                  <codeph>Start</codeph>, <codeph>First editable position</codeph>,
                    <codeph>End</codeph>, or <codeph>After</codeph>. If this parameter is not set,
                  you can still indicate the position of the cursor by using the <xref
                    href="editor-variables.dita#editor-variables/edvar-caret"><i>${caret}</i> editor
                    variable</xref> in the inserted content.</p></li>
              <li><b>expandEditorVariables</b><p>Parameter controlling the expansion of <xref
                    href="editor-variables.dita#editor-variables">editor variables</xref> returned
                  by the script processing. Expansion is enabled by default.</p></li>
              <li><b>suspendTrackChanges</b><p>It has 2 possible values (<codeph>true</codeph> and
                    <codeph>false</codeph>). The default value is <codeph>false</codeph>. When set
                  to <codeph>true</codeph>, the <xref keyref="glossentry_track-changes"><i>Track
                      Changes</i></xref> feature is deactivated. When using this argument, after the
                  action is finished, the state of the <term>Track Changes</term> feature is
                  restored to its initial value.</p></li>
            </ul></p><p><b>XSLTOperation Example: Sort a list with respect to the language declared
              on the root element-</b></p><p>Suppose we want an action that will sort a list with
            respect to the language declared on the root element and we have an XML file like
            this:<codeblock outputclass="language-xml">&lt;article xml:lang="en">
  &lt;ul>
     &lt;li>B&lt;/li>
     &lt;li>C&lt;/li>
     &lt;li>A&lt;/li>
  &lt;/ul>
&lt;/article></codeblock></p><p>The
              <b>XSLTOperation</b> needs to be configured as follows:</p><ul>
            <li><b>sourceLocation</b> is set to /* so that the script has access to the root element
              and its children.</li>
            <li><b>targetLocation</b> is left untouched (assuming that the action is active only
              when the cursor is inside the list).</li>
          </ul><p>The XSLT script would look like
            this:<codeblock outputclass="language-xml">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:saxon="http://saxon.sf.net/"
  xmlns:lds="http://www.lds.org/schema/lds-meta/v1" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  exclude-result-prefixes="xs saxon" version="2.0">

  &lt;xsl:param name="currentElementLocation"/>

  &lt;xsl:template match="/">
      &lt;!-- 
          sourceLocation parameter was set to /* to have a larger context.
          We can pinpoint the element that contained the caret 
          using $currentElementLocation
      -->
     &lt;xsl:apply-templates select="saxon:eval(saxon:expression($currentElementLocation))"/>
  &lt;/xsl:template>

  &lt;xsl:template match="ul">
        
    &lt;!-- Because the sourceLocation parameter was set to /* we now have access to 
         the root element and its attributes. -->
    &lt;xsl:variable name="lang" select="/*/@xml:lang"/>
    &lt;xsl:variable name="collationURI">
      &lt;xsl:value-of select="concat('http://www.w3.org/2013/collation/UCA?lang=', $lang)"/>
    &lt;/xsl:variable>
        
      &lt;xsl:copy>
          &lt;xsl:copy-of select="@*"/>
            
          &lt;!-- Copy the list items, but sorted. -->
          &lt;xsl:apply-templates select="li">
              &lt;xsl:sort collation="{$collationURI}" select="text()"/>
          &lt;/xsl:apply-templates>
      &lt;/xsl:copy>
  &lt;/xsl:template>
    
  &lt;!-- This copy template will handle the contents of the list items. -->
  &lt;xsl:template match="@* | node()">
      &lt;xsl:copy>
          &lt;xsl:apply-templates select="@* | node()"/>
      &lt;/xsl:copy>
  &lt;/xsl:template>
&lt;/xsl:stylesheet></codeblock></p></li>
      </ul></p>
    <section id="editor_variables_in_author_mode_operations">
      <title>Editor Variables in Author Mode Operations</title>
      <p id="editor-variables"><uicontrol>Author</uicontrol> mode operations can include parameters
        that contain the following <xref href="editor-variables.dita#editor-variables">editor
          variables</xref>:<ul>
          <li conkeyref="reusables-editor-variables/edVar-caret"/>
        </ul><note>The <b>${caret}</b> editor variable is available only for parameters that take
          XML content as values. It is replaced with the <b>${UNIQUE_CARET_MARKER_FOR_AUTHOR}</b>
          macro. The default Author operations process this macro and position the cursor at the
          designated offset. </note><ul>
          <li conkeyref="reusables-editor-variables/edvar-selection"/>
          <li conkeyref="reusables-editor-variables/edVar-ask"/>
          <li conkeyref="reusables-editor-variables/edvar-timestamp"/>
          <li conkeyref="reusables-editor-variables/edvar-uuid"/>
          <li conkeyref="reusables-editor-variables/edVar-id"/>
          <li conkeyref="reusables-editor-variables/edVar-cfn"/>
          <li conkeyref="reusables-editor-variables/edVar-cfne"/>
          <li conkeyref="reusables-editor-variables/edvar-cf"/>
          <li conkeyref="reusables-editor-variables/edVar-cfd"/>
          <li conkeyref="reusables-editor-variables/edVar-frameworksDir"/>
          <li conkeyref="reusables-editor-variables/edVar-pd"/>
          <li conkeyref="reusables-editor-variables/edVar-oxygenInstallDir"/>
          <li conkeyref="reusables-editor-variables/edVar-homeDir"/>
          <li conkeyref="reusables-editor-variables/edVar-pn"/>
          <li conkeyref="reusables-editor-variables/edvar-env"/>
          <li conkeyref="reusables-editor-variables/edVar-system"/>
          <li conkeyref="reusables-editor-variables/edVar-date"/>
        </ul></p>
    </section>
    </body>
  <related-links>
    <linklist><title>Related Information:</title><link href="dg-author-op-InsertFragmentOperation-arguments.dita"/><link href="dg-author-op-SurroundWithFragmentOperation-arguments.dita"/></linklist>
    
  </related-links>
</topic>
