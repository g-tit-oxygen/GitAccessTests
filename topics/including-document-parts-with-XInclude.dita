<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="including-document-parts-with-XInclude">
  <title>Including Document Parts with XInclude</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>XML documents<indexterm>XInclude</indexterm></indexterm>
        <indexterm>XInclude</indexterm>
        <indexterm>XInclude 1.1 features</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>XInclude is a standard for assembling XML instances into another XML document through
      inclusion. It enables larger documents to be dynamically created from smaller XML documents
      without having to physically duplicate the content of the smaller files in the <xref
        keyref="glossentry_master-file"><term>master file</term></xref>. XInclude is targeted as the
      replacement for External Entities. The advantage of using XInclude is that, unlike the
      entities method, each of the assembled documents is permitted to contain a Document Type
      Declaration (DOCTYPE). This means that each file is a valid XML instance and can be
      independently validated. It also means that the main document, which includes smaller
      instances, can be validated without having to remove or comment out the DOCTYPE. as is the
      case with External Entities. This makes XInclude a more convenient and effective method for
      managing XML instances that need to be stand-alone documents and part of a much larger
      project.</p>
    <p>The main application for XInclude is in the document-oriented content such as manuals and Web
      pages. Employing XInclude enables you to manage content in a modular fashion that is akin to
      Object Oriented methods used in languages such as Java, C++ or C#.</p>
    <p>The advantages of modular documentation include: reusable content units, smaller file units
      that are easier to be edited, better version control and distributed authoring.</p>
    <p>The XInclude support in <ph keyref="product"/> is enabled by default. It is controlled by the
        <xref href="preferences-xml-parser.dita#preferences-xml-parser/enable-xinclude"
          ><uicontrol>Enable XInclude processing</uicontrol> option</xref> in the <xref
        href="preferences-xml-parser.dita#preferences-xml-parser"><menucascade>
          <uicontrol>XML</uicontrol>
          <uicontrol>XML Parser</uicontrol>
        </menucascade> preferences page</xref>. When enabled, <ph keyref="product"/> will be able to
      validate and transform documents comprised of parts added using XInclude.</p>
    <p><b><u>Example: Using XInclude to Include a Chapter in an Article </u></b></p>
    <p>Chapter file (<filepath>introduction.xml</filepath>) looks like
      this:<codeblock outputclass="language-xml">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"&gt;
&lt;chapter&gt;
    &lt;title&gt;Getting started&lt;/title&gt;
    &lt;section&gt;
        &lt;title&gt;Section title&lt;/title&gt;
        &lt;para&gt;Para text&lt;/para&gt;
    &lt;/section&gt;
&lt;/chapter&gt;</codeblock></p>
    <p>Main article file looks like
      this:<codeblock outputclass="language-xml">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.docbook.org/xml/4.3/docbookx.dtd"
[ &lt;!ENTITY % xinclude SYSTEM "../frameworks/docbook/dtd/xinclude.mod"&gt;
%xinclude;
]&gt;
&lt;article&gt;
    &lt;title&gt;Install guide&lt;/title&gt;
    &lt;para&gt;This is the install guide.&lt;/para&gt;
    &lt;xi:include xmlns:xi="http://www.w3.org/2001/XInclude" 
                    href="introduction.xml"&gt;
      &lt;xi:fallback&gt;
        &lt;para&gt;
          &lt;emphasis&gt;FIXME: MISSING XINCLUDE CONTENT&lt;/emphasis&gt;
        &lt;/para&gt;
      &lt;/xi:fallback&gt;
    &lt;/xi:include&gt;
&lt;/article&gt;</codeblock></p>
    <p>In this example, note the following:<ul>
        <li>
          <p>The DOCTYPE declaration defines an entity that references a file containing the
            information to add the <i>xi</i> namespace to certain elements defined by the DocBook
            DTD.</p>
        </li>
        <li>The href attribute of the xi:include element specifies that the
            <filepath>introduction.xml</filepath> file will replace the <i>xi:include</i> element
          when the document is parsed.</li>
        <li>
          <p>If the <filepath>introduction.xml</filepath> file cannot be found, the parser will use
            the value of the <i>xi:fallback</i> element - a FIXME message.</p>
        </li>
      </ul></p>
    <p><b><u>Example: Include only a Fragment</u></b></p>
    <p>If you want to include only a fragment of a file in the <xref keyref="glossentry_master-file"
          ><term>master file</term></xref>, the fragment must be contained in a tag having an
        <codeph>xml:id</codeph> attribute and you must use an XPointer expression pointing to the
        <codeph>xml:id</codeph> value.<note type="notice"><ph keyref="product"/> supports the <xref
          href="http://www.w3.org/TR/2003/REC-xptr-framework-20030325/" format="html"
          scope="external">XPointer <term>Framework</term></xref> and the <xref
          href="http://www.w3.org/TR/2003/REC-xptr-element-20030325/" format="html" scope="external"
          >XPointer element() Scheme</xref>, but it does NOT support the <xref
          href="https://www.w3.org/TR/xptr-xpointer/" format="html" scope="external">XPointer
          xpointer() Scheme</xref>.</note></p>
    <p>For example, if the <term>master file</term> is:</p>
    <codeblock outputclass="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-model href="test.rng" type="application/xml" 
        schematypens="http://relaxng.org/ns/structure/1.0"?&gt;
&lt;test&gt;
    &lt;xi:include href="a.xml" xpointer="a1"
        xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
&lt;/test&gt;        </codeblock>
    <p>and the <filepath>a.xml</filepath> file is:</p>
    <codeblock outputclass="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;test&gt;
    &lt;a xml:id="a1"&gt;test&lt;/a&gt;
&lt;/test&gt;        </codeblock>
    <p>after resolving the XPointer reference the document is:</p>
    <codeblock outputclass="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-model href="test.rng" type="application/xml" 
          schematypens="http://relaxng.org/ns/structure/1.0"?&gt;
&lt;test&gt;
    &lt;a xml:id="a1" xml:base="a.xml"&gt;test&lt;/a&gt;
&lt;/test&gt;</codeblock>
    <section id="xinclude_11_features">
      <title>XInclude 1.1 Features</title>
      <p><ph keyref="product"/> offers partial support for XInclude 1.1 features. This includes
        support for fragment identifiers and attribute copying.</p>
      <p>
        <ul>
          <li><u><b>Fragment Identifiers</b></u><p>You can <codeph>xi:include</codeph> a text file
              and specify the <codeph>@fragid</codeph> value so that you only get part of that text
              file in the main document. For some examples and to see how
                <codeph>xi:include</codeph> gets expanded when the <codeph>@fragid</codeph>
              specifies a line range or character range, see <xref
                href="https://www.w3.org/TR/xinclude-11/#text-example-2" format="html"
                scope="external"><b>Textual Inclusion Examples with RFC5147 Fragment
                Identifiers</b></xref>.</p></li>
          <li><u><b>Attribute Copying</b></u><p>Any <term>namespaced</term> attribute defined on the
                <codeph>xi:include</codeph> element wll be passed to the root element of the
              included content.</p><p>For example, if you have
              this:<codeblock outputclass="language-xml">&lt;xi:include href="section2.xml" xmlns:xi="http://www.w3.org/2001/XInclude" 
  xml:id="sectInner1"/></codeblock></p><p>and
                <filepath>section2.xml</filepath> looks like
              this:<codeblock outputclass="language-xml">&lt;sect2 xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="section2">
    &lt;title>FS2&lt;/title>
    &lt;para>P2&lt;/para>
&lt;/sect2></codeblock></p><p>then
              the final processed result will have the original <codeph>xml:id="section2"</codeph>
              replaced with the value specified in the <i>xi:included</i> section.</p><p>For more
              information, see <xref href="https://www.w3.org/TR/xinclude-11/#attribute-copying"
                format="html" scope="external"><b>Attribute Copying when Processing XML</b></xref>.
              Also, to see more examples, see <xref
                href="https://www.w3.org/TR/xinclude-11/#att-copy-example" format="html"
                scope="external"><b>Attribute Copying Examples</b></xref>.</p></li>
        </ul>
      </p>
    </section>
  </body>
</topic>
