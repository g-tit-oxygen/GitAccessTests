<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="wa-cc-configuration">
    <title>Customizing the Content Completion Assistant</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Customizing the Content Completion Assistant</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>The <xref keyref="glossentry_content-completion-assistant"><term>Content Completion
          Assistant</term></xref> can be customized for Oxygen XML Web Author using similar methods
      that you would use to customize this feature in standalone distributions of Oxygen XML
      Editor/Author. There are several methods that you can use, including the following:</p>
    <section id="section_zzf_pns_vz">
      <title>Customizing Content Completion in the Document Type Configuration Dialog Box</title>
      <p>You can use the <xref
          href="https://www.oxygenxml.com/doc/ug-editor/topics/the-document-type-dialog.html"
          format="html" scope="external"><uicontrol>Document Type</uicontrol> configuration dialog
          box</xref> to specify which elements or actions should be proposed in the <b>Content
          Completion Assistant</b>. To use this method, follow this procedure:<ol>
          <li>Open the <uicontrol>Preferences</uicontrol> dialog box <menucascade>
              <uicontrol>(Options</uicontrol>
              <uicontrol>Preferences)</uicontrol>
            </menucascade> and go to <uicontrol>Document Type Associations</uicontrol>.</li>
          <li>Select your document type and click the <uicontrol>Extend</uicontrol> button. For more
            information about extending a <term>framework</term>, see <xref
              href="https://www.oxygenxml.com/doc/ug-editor/topics/author-document-type-extension-sharing.html"
              format="html" scope="external">Extending and Sharing a Framework (Document
              Type)</xref>.</li>
          <li>Go to the <uicontrol>Author</uicontrol> tab and <uicontrol>Content
              Completion</uicontrol> subtab. In this subtab, you can specify:<ul>
              <li>Elements to remove from the proposals listed in the <term>Content Completion
                  Assistant</term>.</li>
              <li>Actions to be added to the proposals listed in the <term>Content Completion
                  Assistant</term>.</li>
            </ul></li>
        </ol></p>
    </section>
    <section id="section_hfb_vns_vz">
      <title>Customizing Content Completion Using a Configuration File</title>
      <p>You can use a <filepath>cc_config.xml</filepath> configuration file that is specific to
        each document type (<term>framework</term>) to configure the values that are proposed in
        certain contexts, to customize the attributes or elements that are proposed, or to customize
        how certain aspects of the proposals are rendered in the interface.<ul>
          <li>To configure the possible elements or attributes that are proposed in the
              <term>Content Completion Assistant</term>, see <xref
              href="https://www.oxygenxml.com/doc/ug-editor/topics/configure-elements-attr-cc-individually.html"
              format="html" scope="external">Configuring the Proposals for Elements and
              Attributes</xref>.</li>
          <li>To configure the possible values for attributes or elements that are proposed in the
              <term>Content Completion Assistant</term>, see <xref
              href="https://www.oxygenxml.com/doc/ug-editor/topics/configuring-content-completion-proposals.html"
              format="html" scope="external">Configuring the Proposals for Attribute and Element
              Values</xref>.</li>
          <li>To configure how the elements are rendered in the <term>Content Completion
              Assistant</term>, see <xref
              href="https://www.oxygenxml.com/doc/ug-editor/topics/rendering-elements-cc-author.html"
              format="html" scope="external">Customizing the Rendering of Elements</xref>.</li>
        </ul></p>
    </section>
    <section id="section_gxd_wns_vz">
      <title>Changing the Keyboard Shortcut for Invoking the Content Completion Assistant</title>
      <p>By default, the <term>Content Completion Assistant</term> is invoked automatically when you
        press <uicontrol><shortcut>Enter</shortcut></uicontrol>. For non-technical users, it may be
        helpful to disable this feature and use the default behavior of typical word processors
        where pressing <uicontrol><shortcut>Enter</shortcut></uicontrol> will insert a new
        paragraph. This can be achieved by using the following code in a <xref
          href="customizing_plugins.dita#customizing_plugins"><term>plugin</term></xref> or a <xref
          href="customizing_frameworks.dita#customizing_frameworks"
        ><term>framework</term></xref>:<codeblock outputclass="language-javascript">// If 'splitOnEnter' url parameter is set to 'true',
//    the split is executed automatically when pressing 'Enter'. 
// In this case the content completion window can be accessed
//    when pressing 'CTRL + Enter'.
   
(function() {
 var splitOnEnter =  decodeURIComponent(sync.util.getURLParameter("splitOnEnter"));
 if (splitOnEnter === 'true') {
   goog.events.listen(workspace, sync.api.Workspace.EventType.EDITOR_LOADED, function(e) {
    var actionsManager = e.editor.getActionsManager();
    
// Change the shortcut of "Enter" action to ctrl enter
actionsManager.setActionShortcut('Author/Enter', 'ctrl enter');
   
// Create "Split Element" action
var splitElementAction = new sync.actions.SplitElementAtCaretAction
                         ('enter', e.editor.readOnlyStatus, e.editor.controller);

// Create compound action that splits the element at cursor when
//    there is no selection, and surrounds the selection.

// with the element chosen by the user otherwise
var newEnterAction = new sync.actions.CompoundAction('enter',
      splitElementAction, actionsManager.getActionById('Author/SurroundWithElement'));

// Register the new action to be executed on enter
      actionsManager.registerAction('Author/SplitOnEnter', newEnterAction);
    });

/**
 * Action that splits the element at caret.
 *
 * @param {sync.model.ReadOnlyStatus} readOnlyStatus The read-only status of the file.
 * @param {string} keystrokeStr The string representation of the shortcut of the action.
 * @param {sync.ctrl.Controller} controller The document controller.
 * @constructor
 */
sync.actions.SplitElementAtCaretAction = function(keystroke, readOnlyStatus, controller) {
sync.actions.AbstractAction.call(this, keystroke);
   this.readOnlyStatus = readOnlyStatus;
   this.controller = controller;
  };
goog.inherits(sync.actions.SplitElementAtCaretAction, sync.actions.AbstractAction);

/**
 * The actual action execution.
 *
 * @param {function} callback The method to call after the action has completed.
 */
sync.actions.SplitElementAtCaretAction.prototype.actionPerformed = function(opt_callback){
  var params = { docId: this.controller.docId };
  sync.select.getSelection().extend(params);
  var controller = this.controller;
  RESTContentCompletionManager.splitElement(sync.util.extend(params, {
    $callback: function (httpCode, xmlHttpRequest, newDocumentUpdate) {
      try {
        controller.applyUpdate_(newDocumentUpdate);
      } finally {
        if (typeof opt_callback === 'function') {
         opt_callback();
       }
     }
   }
 }));
};

/** @override */
 sync.actions.SplitElementAtCaretAction.prototype.isEnabled = function() {
   return !this.readOnlyStatus.isReadOnly();
 };
}
})();</codeblock></p>
    </section>
  </body>
</topic>
