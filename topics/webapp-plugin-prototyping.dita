<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="webapp-plugin-prototyping">
  <title>Setting Up a Development Environment for Plugins</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Setting up a development environment for plugins</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <prereq>
      <p>You will need a recent version of Eclipse EE.</p>
    </prereq>
    <context>
      <p>This procedure describes a development environment that can be used to increase your
        productivity in writing <term>plugins</term> for <ph keyref="webappProduct"/>.</p>
      <p>Developing a <term>plugin</term> for <ph keyref="webappProduct"/> might require repetitive
        code-testing cycles. Since the <xref
          href="https://www.oxygenxml.com/oxygen_webapp_running_and_testing.html" format="html"
          scope="external">process of building a whole SDK project</xref> requires a full Maven
        build, the whole process might prove to be time consuming. The following procedure provide a
        faster alternative for testing the <term>plugin</term>:</p>
    </context>
    <steps>
      <step>
        <cmd>Go to the following repository and follow the instructions: <xref
            href="https://github.com/oxygenxml/web-author-plugin-archetype" format="html"
            scope="external"/>.</cmd>
      </step>
      <step>
        <cmd>Run <ph keyref="webappProduct"/> in a Tomcat server. You can either use one of the
            <xref href="https://oxygenxml.com/xml_web_author/download_oxygenxml_web_author.html"
            format="html" scope="external">installation kits</xref>, or build it using the <xref
            href="https://oxygenxml.com/oxygen_sdk/oxygen_webapp_component.html" format="html"
            scope="external">Oxygen XML SDK</xref>.</cmd>
      </step>
      <step>
        <cmd>Look in the Tomcat logs (or in the console) for a line like "<codeph>Loading plugins
            from: ${path}</codeph>" and note the path of the <filepath>plugins</filepath>
          folder.</cmd>
      </step>
      <step>
        <cmd>In the <filepath>plugins</filepath> folder, create a sub-folder with a name of your
          choice (for example, <filepath>myplugin</filepath>).</cmd>
      </step>
      <step>
        <cmd>In that folder (<filepath>myplugin</filepath>), create a
            <filepath>plugin.redirect</filepath> file that contains the path to your
            <term>plugin</term> project (created in step 2) on a single line.</cmd>
      </step>
      <step>
        <cmd>Import your <term>plugin</term> project in Eclipse.</cmd>
        <substeps id="substeps_vy1_gpb_2s">
          <substep>
            <cmd>Click <menucascade>
                <uicontrol>File</uicontrol>
                <uicontrol>Import</uicontrol>
              </menucascade>.</cmd>
          </substep>
          <substep>
            <cmd>Choose <uicontrol>Existing Maven Project</uicontrol>.</cmd>
          </substep>
          <substep>
            <cmd>Browse for the location of your <term>plugin</term>.</cmd>
          </substep>
        </substeps>
      </step>
      <step>
        <cmd>Modify the <filepath>plugin.xml</filepath> file to add a library reference to the
          directory where Eclipse places the compiled output.</cmd>
        <info>With the default setup of a Maven project, this step requires that you add the
          following
          element:<codeblock outputclass="language-xml">&lt;library name="target/classes/"/></codeblock></info>
      </step>
      <step>
        <cmd>You can now open a document in the <ph keyref="webappProduct"/> and it will
          automatically load your <term>plugin</term>.</cmd>
        <info>Every time you make changes to the <term>plugin</term> sources, you will need to
          restart <ph keyref="webappProduct"/>.</info>
      </step>
    </steps>
    <postreq>
      <p>Once you are happy with the result, you need to add the <term>plugin</term> back in your
        SDK project and follow <xref
          href="https://www.oxygenxml.com/oxygen_webapp_running_and_testing.html" format="html"
          scope="external">these instructions</xref> to perform a final testing of the project.</p>
    </postreq>
  </taskbody>
  <related-links>
    <linklist><title>Related Information:</title><link href="webapp-configure-plugins.dita#webapp-configure-plugins"/></linklist>
  </related-links>
</task>
