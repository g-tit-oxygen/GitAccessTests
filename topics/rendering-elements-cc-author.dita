<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="rendering-elements-cc-author">
  <title>Customizing the Rendering of Elements</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Configuring content completion
            proposals</indexterm></indexterm>
        <indexterm>Configuring content completion proposals</indexterm>
        <indexterm>Content completion configuration file (cc_config.xml)</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>In addition to the support for configuring the proposals that appear in the <xref
        keyref="glossentry_content-completion-assistant"><term>Content Completion
        Assistant</term></xref>, <ph keyref="product"/> also includes support for customizing how
      the elements are rendered. You can do this by using the <xref
        href="configuring-xml-node-renderer-customizer.dita#configuring-xml-node-renderer-customizer"
          ><i>XMLNodeRendererCustomizer</i> API extension</xref>, but you can also use
      the same configuration file that is used to configure the content completion proposals.</p>
    <p>For an example of a specific use-case, suppose that in DITA you want the names of paragraph
      elements (<codeph>p</codeph>) to be rendered as <b>"Paragraph"</b> instead of <b>"p"</b> in
      the various components in <uicontrol>Author</uicontrol> mode (such as in the <xref
        href="author-outline-view.dita#author-outline-view"><uicontrol>Outline</uicontrol>
        view</xref>, <xref href="author-elements-view.dita#author-elements-view"
          ><uicontrol>Elements</uicontrol> view</xref>, <xref
        href="author-attributes-view.dita#author-attributes-view"><uicontrol>Attributes</uicontrol>
        view</xref>, and the breadcrumb navigation bar). To achieve this, you can use the
        <codeph>elementRenderings</codeph> element in the configuration file.</p>
    <section conkeyref="reusables-editing-documents/how_to_configure_the_proposed_values_in_cc"
      id="d2e47"/>
    <section id="configuration_file">
      <title>Changing the Rendering of Elements (Their Names, Annotations, and Icons) </title>
      <p>For the purposes of customizing how the content completion elements are rendered, you can
        use the <codeph>render</codeph> element inside a <codeph>elementRenderings</codeph> element
        to specify how element names, their annotations, and their icons are rendered.</p>
      <p>You can use the following attributes for the <codeph>render</codeph> element:<ul
          id="ul_ghd_c55_kr">
          <li><codeph>element</codeph> - Identifies the element to be customized, in the form of a
            qualified name. If it does not have a prefix, it is considered to be from
              <i>noNamespace</i>.</li>
          <li><codeph>as</codeph> - Provides the name (label) that will be displayed for the element
            in various components in <uicontrol>Author</uicontrol> mode (such as in the
              <term>Content Completion Assistant</term>, the breadcrumb navigation bar, the <xref
              href="author-display-markup.dita#author-display-markup"><uicontrol>Full
                Tags</uicontrol> display mode</xref>, and the <xref
              href="author-outline-view.dita#author-outline-view"
              ><uicontrol>Outline</uicontrol></xref>, <xref
              href="author-elements-view.dita#author-elements-view"
              ><uicontrol>Elements</uicontrol></xref>, <xref
              href="author-attributes-view.dita#author-attributes-view"
                ><uicontrol>Attributes</uicontrol></xref> views). This attribute is optional. If it
            is missing, the name of the element is used.</li>
          <li><codeph>iconPath</codeph> - Optional attribute that specifies the icon for the
            element. This is shown in the <term>Content Completion Assistant</term> and the <xref
              href="author-outline-view.dita#author-outline-view"><uicontrol>Outline</uicontrol>
              view</xref> in <uicontrol>Author</uicontrol> mode. If it is a relative path, the full
            path of the icon image file will be computed starting from the directory of the
            configuration file (for example, a value of <codeph>"myImg.png"</codeph> will cause <ph
              keyref="product"/> to load <filepath>"frameworks/$
              {framework}/resources/myImg.png"</filepath>). If you want to access a built-in
            resource, the value can begin with a forward slash <codeph>"/"</codeph>, and the image
            file will be searched for in the <ph keyref="product"/> classpath resources (for
              example,<codeph>"/images/OrderedList16.png"</codeph> will load an icon from the
            built-in <ph keyref="product"/>
            <term>JAR</term> file resources.</li>
          <li><codeph>xml:lang</codeph> - Optional attribute that could be used to render the same
            element differently, depending on the language. If there are multiple
              <codeph>render</codeph> elements for the same <codeph>element</codeph> attribute
            (element name) and the <codeph>xml:lang</codeph> attribute is missing on one of them,
            that one will be considered the default fallback value to be used if none of the others
            match the language specified in the interface.<note>The default entry should be listed
              first, since the application tries to match them in sequence and the last match found
              is the one that is used.</note><p>For example, suppose that you want the name of DITA
              paragraph elements (<codeph>p</codeph>) to be rendered as "Paragraphe" if the language
              is French, "Absatz" if the language is German, and "Paragraph" if the language is
              English (or any other language). Your configuration file should look something like
              this:<codeblock outputclass="language-xml">       &lt;elementRenderings>
	        &lt;render element="p" as="Paragraph"/>
        	&lt;render element="p" as="Paragraphe" xml:lang="fr"/>
        	&lt;render element="p" as="Absatz" xml:lang="de"/>
       &lt;/elementRenderings></codeblock></p></li>
        </ul></p>
      <p>You can also use the configuration file to customize the annotations for elements. For this
        purpose, the <codeph>render</codeph> element also accepts the following element to change
        the tooltip annotations for an element (in both <uicontrol>Author</uicontrol> mode and
          <uicontrol>Text</uicontrol> mode):<ul>
          <li><codeph>annotation</codeph> - This element can be used within the
              <codeph>render</codeph> element to customize the tooltip annotations that are
            displayed for the element in various components in <uicontrol>Author</uicontrol> mode
            (such as tooltips shown in the <term>Content Completion Assistant</term> documentation
            window, the breadcrumb navigation bar, the <xref
              href="author-display-markup.dita#author-display-markup"><uicontrol>Full
                Tags</uicontrol> display mode</xref>, and the <xref
              href="author-outline-view.dita#author-outline-view"
              ><uicontrol>Outline</uicontrol></xref>, <xref
              href="author-elements-view.dita#author-elements-view"
              ><uicontrol>Elements</uicontrol></xref>, <xref
              href="author-attributes-view.dita#author-attributes-view"
                ><uicontrol>Attributes</uicontrol></xref> views), as well as the tooltips that are
            displayed when you hover over elements in <uicontrol>Text</uicontrol> mode. You can use
            HTML content to style the annotations (see the <xref
              href="#rendering-elements-cc-author/example-rendering" format="dita">example
              below</xref>).<note>If this element is missing, the <xref
                href="content-completion-schema-annotations-author.dita#content-completion-schema-annotations-author"
                >styling for the annotations for that element is collected from the associated
                schema</xref>.</note></li>
        </ul></p>
    </section>
    <section id="other_important_notes">
      <title>Other Important Notes About the Configuration File for Rendering Elements</title>
      <note type="important">
        <ul>
          <li>This configuration file only affects the content completion assistance, not
            validation.</li>
          <li>To test the effects of your changes, you should restart the application, although in
            some cases, you can simply use the <uicontrol><image href="../img/Refresh16.png"/>
              Refresh (<shortcut>F5</shortcut>)</uicontrol> action to test your customizations.</li>
          <li>If the <xref keyref="glossentry_framework"><term>framework</term></xref> has an
            associated <i>style guide</i>, then the annotations defined in the configuration file
            will take precedence over those defined in the <i>style guide</i>. To check to see if
            your <term>framework</term> uses a <i>style guide</i>, look for the following folder:
              <filepath>${oXygenInstallDir}frameworks/${framework}/styleguide/</filepath>. If that
            folder exists, it is recommended that you make your annotation changes directly in the
              <term>style guide</term>, rather than in the configuration file.</li>
          <li>If an <xref
              href="configuring-xml-node-renderer-customizer.dita#configuring-xml-node-renderer-customizer"
                ><i>XMLNodeRendererCustomizer</i> API extension</xref> has been
            implemented for the <term>framework</term> and a configuration file is also used, the
            rendering customization for an element will be the result of merging the two. For
            example, if the <i>XMLNodeRendererCustomizer</i> implementation customizes
            the element name, while the configuration file specifies an icon for the element, the
            properties of both customizations will be rendered. However, if both implementations
            define the same property (for example, both specify the rendering of an element name),
            the customizations defined in the configuration file take precedence.</li>
          <li>The rendering customizations defined in the configuration file also applies to aspects
            of the <ph keyref="webappProduct"/> interface.</li>
        </ul>
      </note>
    </section>
    <section id="example-rendering">
      <title>Example: Changing the Rendering of an Element</title>
      <p>Suppose that you want to render the name of the DITA <codeph>title</codeph> element to
        begin with a capital letter, use a custom icon for it, and provide specific documentation
        for that element in the various components in <uicontrol>Author</uicontrol> mode. The
        configuration file should look like
        this:<codeblock outputclass="language-xml">&lt;elementRenderings>
   &lt;render element="title"   as="Title"  iconPath="cimg/AcceptAll16.png">
      &lt;annotation>
         &lt;html xmlns="http://www.w3.org/1999/xhtml">
           &lt;head>
             &lt;title>Documentation for the Title Element&lt;/title>
           &lt;/head>
             &lt;body>
           &lt;p>A &lt;i>heading&lt;/i> or &lt;b>label&lt;/b> for the main parts of a topic&lt;/p>
             &lt;/body>
         &lt;/html>
             &lt;/annotation>
	  &lt;/render>
   &lt;/elementRenderings></codeblock></p>
    </section>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link
        href="configuring-content-completion-proposals.dita#configuring-content-completion-proposals"/>
      <link
        href="configure-elements-attr-cc-individually.dita#configure-elements-attr-cc-individually"/>
      <link
        href="configuring-xml-node-renderer-customizer.dita#configuring-xml-node-renderer-customizer"/>
      <link
        href="content-completion-schema-annotations-author.dita#content-completion-schema-annotations-author"/>
      <link href="author-styleguide-annotations.dita#author-styleguide-annotations"/>
    </linklist>
  </related-links>
</topic>
