<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="author-devel-guide-intro">
  <title><?oxy_comment_start author="steven_higgs" timestamp="20150508T124303+0300" comment="(Project related to EXM-30920) The Simple and Advanced Customization Tutorial sections needs to be updated. Some sections have topics in the wrong order, the use of the &quot;sdf&quot; framework is inconsistent (it would be better to just use it as an example for codeblocks, etc. since users may find one of the page through a search and wouldn&apos;t have read the previous topics that intodruce the &quot;sdf&quot; example), and some of the topics are confusing and not helpful."?>Author
    Mode Customization Guide<?oxy_comment_end?></title>
  <body>
    <p><?oxy_comment_start author="steven_higgs" timestamp="20150930T103537+0300" comment="See Stefan&apos;s notes copied in EXM-30920"?>The
        <?oxy_comment_end?><uicontrol>Author</uicontrol> mode editor of <ph keyref="product"/> was
      designed to provide a user-friendly interface for editing XML documents.
        <uicontrol>Author</uicontrol> combines the power of source editing with the intuitive
      interface of a word processor. You can customize the <uicontrol>Author</uicontrol> mode editor
      to support new custom XML formats or to change how standard XML formats are edited.</p>
    <p>Although <ph keyref="product"/> includes built-in, configured <xref
        keyref="glossentry_framework"><term>frameworks</term></xref> for DocBook, DITA, TEI, and
      XHTML you might need to create a customization of the editor to handle other types of
      documents. A common use case is when your organization holds a collection of XML document
      types used to define the structure of internal documents and they need to be visually edited
      by people with no experience working with XML files.</p>
    <p>There are several ways to customize the editor:</p>
    <ol>
      <li>Create a CSS file defining styles for the XML elements you will work with, and create XML
        files that reference the CSS through an <codeph>xml-stylesheet</codeph> processing
        instruction.</li>
      <li>Fully configure a <xref keyref="glossentry_framework"><term>framework</term></xref>. This
        involves putting together the CSS stylesheets, XML schemas, actions, menus, bundling them,
        and distributing an archive. The CSS and GUI elements are settings for the <ph
          keyref="product"/>
        <uicontrol>Author</uicontrol> mode. The other settings such as the templates, catalogs, and
        transformation scenarios are general settings and are enabled whenever the association is
        active, regardless of the editing mode (<uicontrol>Text</uicontrol>,
          <uicontrol>Grid</uicontrol>, or <uicontrol>Author</uicontrol>).</li>
    </ol>
  </body>
</topic>
