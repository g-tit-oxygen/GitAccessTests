<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="component_faq">
  <title>Frequently Asked Questions </title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Oxygen XML Author Component<indexterm>Frequently Asked
          Questions</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <section id="installation_and_licensing">
      <title>Installation and Licensing </title>
      <ol>
        <li>What hosting options are available for applet delivery and licensing services (for
          example, Apache, IIS, etc.)?<p>For applet delivery any web server. We currently use Apache
            to deploy the sample on our site. For the floating license server you would need a J2EE
            server (such as Tomcat) if you want to restrict the access to the licenses. </p><p>If
            you do not need the access restrictions that are possible with a J2EE server you can
            simplify the deployment of the floating license server by using the TCP version of this
            server. The TCP license server is a simple Java application that communicates with the
              <ph keyref="authorComponent"/> by TCP/IP connections. </p></li>
        <li>Are there any client requirements beyond the Java VM and (browser) Java PlugIn
          Technology? <p>Oracle (formerly Sun) Java JRE version 1.6 update 10 or newer. At least 200
            MB disk space and 200MB free memory would be necessary for the <ph
              keyref="authorComponent"/> applet.</p></li>
        <li>Are there any other client requirements or concerns that could make deployment
          troublesome (for example, browser security settings, client-side firewalls, and AV
            engines)?<p>The applet is signed and will request access to the user machine to store
              <xref keyref="glossentry_framework"><term>framework</term></xref> customization data.
            The applet needs to be signed with a valid certificate.</p></li>
        <li>How sensitive is the applet for the automatic Java VM updates that are typically on by
          default (for example, could automatic updates potentially &quot;break&quot; the
            run-time)?<p>The component should work well with newer Java versions but we cannot
            guarantee this.</p></li>
        <li>How and when are &quot;project&quot; related files deployed to the client (for example,
          applet code, DTD, styling files, customizations, etc.)? <p><term>Framework</term> files
            are downloaded on the first load of the applet. Subsequent loads will re-use the cached
            customization files and will be much faster.</p></li>
        <li>For on-line demo
            (<filepath>http://www.oxygenxml.com/demo/AuthorDemoApplet/author-component-dita.html</filepath>),
          noted a significant wait during initial startup. Any other mechanisms to enhance startup
            time?<p>See the explanation above.</p></li>
        <li>Does the <ph keyref="authorComponent"/> support multiple documents being open
          simultaneously? What are the licensing ramifications? <p>A single
              <i>AuthorComponentFactory</i> instance can create multiple
              <i>EditorComponentProvider</i> editors that can then be added and managed
            by the developer who is customizing the component in a Swing
              <i>JTabbedPane</i>. A single license (floating or user-based) is enough
            for this.</p><p>If you need to run multiple Java Applets or distinct Java processes
            using the <ph keyref="authorComponent"/>, the current floating license model allows for
            now only two concurrent components from the same computer when using the HTTP floating
            license server. An additional started component will take an extra license seat.
          </p></li>
        <li>Is there any internet traffic during an editing session (user actively working on the
          content, on the client side, in the <ph keyref="authorComponent"/>)?<p>No.</p></li>
      </ol>
    </section>
    <section id="functionality">
      <title>Functionality</title>
      <ol>
        <li>How and when are saves performed back to the hosting server? <p>What you can see on our
            web site is just an example of the <ph keyref="authorComponent"/> (which is a Java Swing
            component) used in an Applet.</p><p>This applet is just for demonstration purposes.
            It's source can be at most a starting point for a customization. You should implement,
            sign and deploy your custom applet implementation. </p><p>The save operation could be
            implemented either in JavaScript by requesting the XML content from the Applet or in
            Java directly working with the <ph keyref="authorComponent"/>. You would be responsible
            to send the content back to the CMS.</p></li>
        <li>Is there a particular XML document size (or range) when the applet would start to
          exhibit performance problems? <p>The applet has a total amount of used memory specified in
            the JNLP JavaWebstart configuration file, which can be increased if necessary. By
            default, it is 156 Mb. It should work comfortably with documents of 1-3
          megabytes.</p></li>
        <li>What graphic formats can be directly rendered in the <ph keyref="authorComponent"
            />?<p>GIF, JPEG, PNG, BMP and SVG.</p></li>
        <li>Can links be embedded to retrieve (from the server) and &quot;play&quot; other types of
          digital assets, such as audio or video files?<p>You could add listeners to intercept
            clicks and open the clicked links. This would require a good knowledge of the <i>Oxygen
              SDK</i>. The <ph keyref="authorComponent"/> can only render static images (no GIF
            animations). </p></li>
        <li>Does the <ph keyref="authorComponent"/> provide methods for uploading ancillary files
          (new graphics, for instance) to the hosting server? <p>No.</p></li>
        <li>Does the <ph keyref="authorComponent"/> provide any type of autosave functionality?<p>By
            default no but you could customize the applet that contains the <ph
              keyref="authorComponent"/> to save its content periodically to a file on
          disk.</p></li>
        <li>Assuming multiple documents can be edited simultaneously, can content be copied, cut and
          pasted from one <ph keyref="authorComponent"/> &quot;instance&quot; to
          another?<p>Yes.</p></li>
        <li>Does the <ph keyref="authorComponent"/> support pasting content from external sources
          (such as a web page or a Microsoft Word document and, if so, to what extent? <p>If no
            customizations are available the content is pasted as simple text. We provide
            customizations for the major <term>frameworks</term> (DITA, DocBook, TEI, etc.) that use
            a conversion XSLT stylesheet to convert HTML content from clipboard to the target
            XML.</p></li>
        <li>Can UTF-8 characters (such as Greeks, mathematical symbols, etc.) be inserted and
          rendered? <p>Any UTF-8 character can be inserted and rendered, provided that the font used
            for editing supports rendering the characters. The font can be changed by developers but
            not by the users. When using a logical font (by default, <i>Serif</i> for the <ph
              keyref="authorComponent"/>), the JVM will know how to map all characters to glyphs.
            There is no character map available but you could implement one </p></li>
      </ol>
    </section>
    <section id="customization">
      <title>Customization</title>
      <ol>
        <li>Please describe, in general terms, the menus, toolbars, contextual menu options, helper
          panes, and so on, that are available for the <ph keyref="authorComponent"/> out-of-the
          box. <p>You can mount on your custom toolbar all actions available in the standalone <ph
              keyref="product"/> application for editing in the <uicontrol>Author</uicontrol> mode.
            This includes custom actions defined in the <term>framework</term> customized for each
            XML type. </p><p>The <ph keyref="authorComponent"/> also can provide the <xref
              href="author-outline-view.dita#author-outline-view"
              ><uicontrol>Outline</uicontrol></xref>, <xref href="model-panel.dita#model-panel"
                ><uicontrol>Model</uicontrol></xref>, <xref
              href="author-elements-view.dita#author-elements-view"
              ><uicontrol>Elements</uicontrol></xref>, and <xref
              href="author-attributes-view.dita#author-attributes-view"
                ><uicontrol>Attributes</uicontrol></xref> views that can be added to your own panels
            (see sample applet).</p></li>
        <li>Please describe, in general terms, the actions, project resources (for example,
          DTD/Schema for validation purposes, CSS/XSL for styling, etc.) and typical level of effort
          that would be required to deploy a <ph keyref="authorComponent"/> solution for a customer
          with a proprietary DTD.<p>The <uicontrol>Author</uicontrol> mode internal engine uses CSS
            to render XML. </p><p>For a special type of XML, you can create a custom
              <term>framework</term> (which also works in an <ph keyref="product"/> standalone
            version) that would also contain default schemas and custom actions. A simple
              <term>framework</term> would probably need 2-3 weeks development time. For a complex
              <term>framework</term> with many custom actions it could take a couple of months. <ph
              keyref="product"/> already has <term>frameworks</term> for editing (DocBook, DITA,
            TEI, etc.) Sources for them are available in <xref
              href="https://www.oxygenxml.com/developer.html#XML_Editor_Authoring_SDK" format="html"
              scope="external"> the Oxygen SDK</xref>.</p><p>Multiple <term>frameworks</term> can
            co-exist in the same <ph keyref="product"/> instance (the desktop standalone version or
            the applet version) and can be used at the same time for editing XML documents.</p></li>
        <li>Many customers desire a very simplistic interface for contributors (with little or no
          XML expertise) but a more robust XML editing environment for editors (or other users with
          more advanced XML expertise). How well does the <ph keyref="authorComponent"/> support
          varying degrees of user interface complexity and capability?<p>
            <ul>
              <li><i>Showing/hiding menus, toolbars, helpers, etc.</i>
                <p>You assemble all the UI parts from the <ph keyref="authorComponent"/>. For
                  example, you could provide two applet implementations: one for advanced users and
                  one for content authors.</p></li>
              <li><i>Forcing behaviors (for example, ensuring <xref
                    keyref="glossentry_track-changes">change tracking</xref> is on and preventing it
                  from being shut down).</i>
                <p>You could avoid placing the <term>change tracking</term> toolbar actions in the
                  custom applet. You could also use API to turn <term>change tracking</term> ON when
                  the content has been loaded.</p></li>
              <li><i>Preventing access to &quot;privileged&quot; editor processes (for example,
                  accept/reject changes).</i>
                <p>You can remove the <term>change tracking</term> actions completely in a custom
                  applet implementation. Including the ones from the contextual menu.</p></li>
              <li><i>Presenting and/or describing XML constructs (for example, tags) in
                  &quot;plain-English&quot;.</i>
                <p>Using our API, you can customize what the Outline or Breadcrumb presents for each
                  XML tag. You can also customize the in-place content completion list.</p></li>
              <li><i>Presenting a small subset of the overall XML tag set (rather than the full tag
                  set) for use by contributors (for example, allowing an author to only insert
                  Heading, Para and inline emphasis).</i><p>The API allows for a content completion
                  filter that also affects the <i>Elements</i> view.</p></li>
            </ul>
          </p></li>
        <li>Does the <ph keyref="authorComponent"/> API provide access to the XML document, for
          manipulation purposes, using common XML syntax (such as DOM, XPath, etc.)? <p>Yes, using
            the <ph keyref="authorComponent"/> API.</p></li>
        <li>Can custom dialog boxes be developed and launched to collect information in a
          &quot;form&quot; (with scripting behind to push tag the collection information and embed
          it in the XML document? <p>Yes.</p></li>
        <li>Can project resources and customizations be readily shared between the desktop and
          component versions of your <ph keyref="authorComponent"/> product line?<p>A
              <term>framework</term> developed for the desktop version of the <ph keyref="product"/>
            application can then be bundled with the <ph keyref="authorComponent"/> in a custom
            applet. For example, the demo applet from our web site is DITA-aware using the same
              <term>framework</term> as the <ph keyref="product"/> standalone distribution.</p><p>A
            custom version of the applet that includes one or more customized
              <term>frameworks</term> and user options can be built and deployed for non-technical
            authors by a technical savvy user using a built-in tool of <ph keyref="product"/>. All
            the authors that load the deployed applet from the same server location will share the
            same <term>frameworks</term> and options.</p><p>A custom editing solution can deploy one
            or more <term>frameworks</term> that can be used at the same time.</p></li>
      </ol>
    </section>
  </body>
</topic>
