<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="xslt-refactoring-actions">
  <title>XSLT Refactoring Actions</title>
  <prolog>
    <metadata>
      <keywords><indexterm>XSLT<indexterm>Refactoring actions</indexterm></indexterm></keywords>
    </metadata>
  </prolog>
  <body>
    <p><ph keyref="product"/> offers a set of actions that allow you to change the structure of an
      XSLT stylesheet without changing the results of running it in an XSLT transformation.
      Depending on the selected text, the following XSLT refactoring actions are available from the
        <uicontrol>Refactoring</uicontrol> submenu of the contextual menu<ph
        product="developer editor"> (or from the <menucascade>
          <uicontrol>Document</uicontrol>
          <uicontrol>Refactoring</uicontrol>
        </menucascade> menu)</ph>:</p>
    <ul>
      <li><uicontrol><image href="../img/CreateTemplate16.png" id="image_ptf_4fn_wr"/> Extract
          template</uicontrol> (Active only when the selection contains well-formed elements) - <ph
          conkeyref="reusables-editing-documents/extract_template_short_desc"/> It opens a dialog
        box that allows you to specify the name of the new template to be created. The possible
        changes to perform on the document can be previewed before altering the document. After
        pressing OK, the template is created and the selection is replaced with a
          <codeph>&lt;xsl:call-template&gt;</codeph> instruction referencing the newly created
          template.<note>The newly created template is indented and its name is highlighted in the
            <codeph>&lt;xsl:call-template></codeph> element.</note></li>
      <li><uicontrol><image href="../img/XSLCreateFunction16.png"/> Extract function</uicontrol> -
        Extracts the selected XSLT instructions sequence into a new function. It opens a dialog box
        that allows you to specify the name of the new function. It then moves the selected lines to
        a newly created XSLT function and inserts a function call in the place of the selected
        lines. You can also use parts of an XPath expression to create the new functions. </li>
      <li><uicontrol><image href="../img/XSLCreateLocalVariable16.png"/> Create local
          variable</uicontrol> - Creates an XSLT variable, wrapped around the selection. It opens a
        dialog box that allows you to specify the name of the new variable. It then wraps the
        selection in the variable and you can reference it at anytime in the code.</li>
      <li><uicontrol><image href="../img/CreateStylesheet16.png" id="image_dwx_gfn_wr"/> Move to
          another stylesheet</uicontrol> (Active only when entire components are selected) - <ph
          conkeyref="reusables-editing-documents/move_to_another_stylesheet_short_desc"/> It opens a
        dialog box that allows you to specify where the selected components will be moved to. Follow
        these steps when using the dialog box:<ol id="ul_u1t_d3b_c4">
          <li>Choose whether you want to move the selected components to a new stylesheet or an
            existing one.</li>
          <li>If you choose to move the components to an existing one, select the destination
            stylesheet. Press the <uicontrol>Choose</uicontrol> button to select the destination
            stylesheet file. <ph keyref="product"/> will automatically check if the destination
            stylesheet is already contained by the hierarchy of the current stylesheet. If it is not
            contained, choose whether or not the destination stylesheet will be referenced (imported
            or included) from the current stylesheet. The following options are available:<ul
              id="ul_byx_fhb_c4">
              <li><uicontrol>Include</uicontrol> - The current stylesheet will use an
                  <codeph>xsl:include</codeph> instruction to reference the destination
                stylesheet.</li>
              <li><uicontrol>Import</uicontrol> - The current stylesheet will use an
                  <codeph>xsl:import</codeph> instruction to reference the destination
                stylesheet.</li>
              <li><uicontrol>None</uicontrol> - There will be created no relation between the
                current and destination stylesheets.</li>
            </ul></li>
          <li>Press the <uicontrol>Move</uicontrol> button to move the components to the
            destination. The moved components are highlighted in the destination stylesheet.</li>
        </ol></li>
      <li><uicontrol>Convert attributes to xsl:attributes</uicontrol> - Converts the attributes from
        the selected element and represents each of them with an
          <codeph>&lt;xsl:attribute&gt;</codeph> instruction. For example, the following
          element:<codeblock outputclass="language-xml">&lt;person id="Big{test}Boss"/></codeblock><p>is
          converted
        to:</p><codeblock outputclass="language-xml">&lt;person>
    &lt;xsl:attribute name="id">
        &lt;xsl:text>Big&lt;/xsl:text>
        &lt;xsl:value-of select="test"/>
        &lt;xsl:text>Boss&lt;/xsl:text>
    &lt;/xsl:attribute>
&lt;/person></codeblock></li>
      <li id="convert-xsl-if-to-xsl-choose"><uicontrol>Convert xsl:if into
          xsl:choose/xsl:when</uicontrol> - Converts one or more <codeph>xsl:if</codeph> element
        blocks into one or more <codeph>xsl:when</codeph> blocks surrounded by an
          <codeph>xsl:choose</codeph> element. If it is invoked on a selection, the selection must
        contain a well-formed fragment. If there is no selection, the <codeph>xsl:if</codeph>
        element that surrounds the content at the current cursor position is converted.<p>For
          example, the following
          block:</p><codeblock outputclass="language-xml">&lt;xsl:if test="a">
  &lt;!-- XSLT code -->
&lt;/xsl:if></codeblock><p>is
          converted
          to:<codeblock outputclass="language-xml">&lt;xsl:choose>
    &lt;xsl:when test="a">
        &lt;!-- XSLT code -->
    &lt;/xsl:when>
    &lt;xsl:otherwise>
        |
    &lt;/xsl:otherwise>
&lt;/xsl:choose></codeblock></p><p>(where
          the <codeph>|</codeph> character is the current cursor position)</p></li>
      <li><uicontrol>Convert xsl:choose/xsl:when into xsl:if</uicontrol> - Converts each
          <codeph>xsl:when</codeph> block into an <codeph>xsl:if</codeph> block. For the
          <i>otherwise</i> branch, it also adds an <i>and</i> statement to each negated form of the
        conditions. For example, the following
          block:<codeblock outputclass="language-xml">&lt;xsl:choose>
    &lt;xsl:when test="c1">
        &lt;!-- XSLT statement 1 -->
    &lt;/xsl:when>
    &lt;xsl:when test="c2">
        &lt;!-- XSLT statement 2 -->
    &lt;/xsl:when>
    &lt;xsl:when test="c3">
        &lt;!-- XSLT statement 3 -->
    &lt;/xsl:when>
    &lt;xsl:otherwise>
        &lt;!-- XSLT "otherwise" statement-->
    &lt;/xsl:otherwise>
&lt;/xsl:choose></codeblock><p>is
          converted
          to:<codeblock outputclass="language-xml">&lt;xsl:if test="c1">
    &lt;!-- XSLT statement 1 -->
&lt;/xsl:if>
&lt;xsl:if test="c2">
    &lt;!-- XSLT statement 2 -->
&lt;/xsl:if>
&lt;xsl:if test="c3">
    &lt;!-- XSLT statement 3 -->
&lt;/xsl:if>
&lt;xsl:if test="not(c1) and not(c2) and not(c3)">
    &lt;!-- XSLT "otherwise" statement-->
&lt;/xsl:if></codeblock></p></li>
      <li><uicontrol><image href="../img/XSLLocalVariable16.png"/> Extract local
          variable</uicontrol> (Active on a selection made inside an attribute that contains an
        XPath expression) - <ph conkeyref="reusables-editing-documents/extract_local_var_sh_desc"/>
        After creating the new local variable before the current element, <ph keyref="product"/>
        allows you to edit the name of the variable.</li>
      <li><uicontrol><image href="../img/XSLVariable16.png"/> Extract global variable</uicontrol>
        (Active on a selection made inside an attribute that contains an XPath expression) - <ph
          conkeyref="reusables-editing-documents/extract_global_var_sh_desc"/> After creating the
        new global variable, <ph keyref="product"/> allows you to edit the name of the
            variable.<note><ph keyref="product"/> checks if the selected expression depends on local
          variables or parameters that are not available in the global context where the new
          variable is created.</note></li>
      <li><uicontrol><image href="../img/XSLLocalParam16.png"/> Extract template
          parameter</uicontrol> (Active on a selection made inside an attribute that contains an
        XPath expression) - <ph conkeyref="reusables-editing-documents/extract_templ_param_sh_desc"
        /> After creating the new parameter, <ph keyref="product"/> allows you to edit the name of
        the parameter.</li>
      <li><uicontrol><image href="../img/XSLParam16.png"/> Extract global parameter</uicontrol>
        (Active on a selection made inside an attribute that contains an XPath expression) - <ph
          conkeyref="reusables-editing-documents/extract_global_param_sh_desc"/> After creating the
        new parameter, <ph keyref="product"/> allows you to edit the name of the parameter.<note><ph
            keyref="product"/> checks if the selected expression depends on local variables or
          parameters that are not available in the global context where the new parameter is
          created.</note></li>
      <li conkeyref="reusables-search-refactoring-actions/rename-component-li"/>
      <li conkeyref="reusables-search-refactoring-actions/rename-component-in-li"/>
    </ul>
    <note>Many of these refactoring actions are also proposed by the <xref
        href="xslt-quick-assist.dita#xslt-quick-assist"><term>Quick Assist</term>
      support</xref>.</note>
    <p>For more information about XSLT refactoring, watch our video demonstration:</p>
    <p><object width="450" height="250" data="https://www.youtube.com/embed/4ir5XWyp8Zo"
        outputclass="iframe">
        <param name="allowfullscreen" value="true"/>
      </object></p>
  </body>
</topic>
